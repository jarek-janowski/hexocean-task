{"version":3,"sources":["components/FieldValidation.tsx","components/Input/Input.tsx","components/FieldComponents.tsx","components/AddDishForm/AddDishForm.tsx","spinner.svg","components/Modal/Modal.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["min","Input","errorMessage","props","className","nameInput","input","meta","maxlength","placeholder","type","touched","error","prepTimeInput","console","log","style","color","dirty","letterSpacing","noOfSlicesInput","diameterInput","step","spicinessScaleInput","max","list","id","value","slicesOfBreadInput","required","v","minLength6","length","undefined","reduxForm","form","onNameInputChange","onPrepTimeInputChange","onNoOfSlicesInputChange","onDiameterInputChange","onSpicinessScaleInputChange","onSlicesOfBreadInputChange","onTypeSelectChange","name","prepTime","noOfSlices","diameter","spicinessScale","slicesOfBread","handleSubmit","valid","reset","useState","resetSelect","setResetSelect","prepTimeMask","createTextMask","pattern","onChange","match","join","FieldCustom","Field","onSubmit","e","preventDefault","uuidv4","component","validate","disabled","Modal","responseData","closeModal","responseStatus","preparation_time","no_of_slices","spiciness_scale","slices_of_bread","somethigWentWrong","dishSuccessfullyAded","src","spinner","alt","onClick","reducers","combineReducers","formReducer","store","createStore","App","setResponseData","showModal","setShowModal","NaN","setResposneStatus","setName","setPrepTime","setNoOfSlices","setDiameter","setSpicinessScale","setSlicesOfBread","setType","dishSpecificOptions","parseInt","parseFloat","target","fetch","method","body","JSON","stringify","headers","then","res","status","json","data","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e49133f.chunk.js","sourcesContent":["export const required = (v: any) => {\r\n    if (!v || v === ''){\r\n        return \"This field is required\"\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport const minLength = (min: any) => (value: any) =>\r\n  value && value.length < min ? `Must be ${min} characters` : undefined\r\nexport const minLength6 = minLength(6)","import './Input.scss'\r\n\r\nconst Input = ({errorMessage, ...props}: any) => (\r\n    <>\r\n        <input {...props} />\r\n        <span className=\"error-message\">{errorMessage}</span>\r\n    </>\r\n);\r\n\r\nexport default Input;","import Input from './Input/Input'\r\n\r\nexport const nameInput = ({input, meta}: any) => {\r\n    return(\r\n    <Input {...input} maxlength=\"28\" placeholder=\"ex. HexOcean pizza\" type=\"text\" errorMessage={meta.touched && meta.error}/>\r\n    )\r\n}\r\n\r\nexport const prepTimeInput = ({input, meta}: any) => {\r\n    console.log(meta)\r\n    return(\r\n    <Input {...input} style={{color: !meta.dirty ? '#777' : 'black', letterSpacing: 1}} type=\"tel\" errorMessage={meta.touched && meta.error}/>\r\n    )\r\n}\r\n\r\nexport const noOfSlicesInput = ({input, meta}: any) => {\r\n    return(\r\n    <Input {...input} placeholder=\"ex. 4\" type=\"number\" errorMessage={meta.touched && meta.error}/>\r\n    )\r\n}\r\n\r\nexport const diameterInput = ({input, meta}: any) => {\r\n    return(\r\n    <Input {...input} placeholder=\"ex. 33.4\" type=\"number\" step=\"any\" maxlength=\"5\" errorMessage={meta.touched && meta.error}/>\r\n    )\r\n}\r\n\r\nexport const spicinessScaleInput = ({input, meta}: any) => {\r\n    return(\r\n    <>\r\n    <Input {...input} type=\"range\" min=\"1\" max=\"10\" list=\"tickmarks\" errorMessage={meta.touched && meta.error}/>\r\n    <datalist id=\"tickmarks\">\r\n        <option value=\"1\"></option>\r\n        <option value=\"2\"></option>\r\n        <option value=\"3\"></option>\r\n        <option value=\"4\"></option>\r\n        <option value=\"5\"></option>\r\n        <option value=\"6\"></option>\r\n        <option value=\"7\"></option>\r\n        <option value=\"8\"></option>\r\n        <option value=\"9\"></option>\r\n        <option value=\"10\"></option>\r\n    </datalist>\r\n    </>\r\n    )\r\n}\r\n\r\nexport const slicesOfBreadInput = ({input, meta}: any) => {\r\n    return(\r\n    <Input {...input} placeholder=\"ex. 3\" type=\"number\"  errorMessage={meta.touched && meta.error}/>\r\n    )\r\n}","import { useState } from 'react';\r\nimport {reduxForm, Field, GenericField } from 'redux-form';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { createTextMask } from 'redux-form-input-masks';\r\nimport './AddDishForm.scss';\r\nimport {nameInput, \r\n    prepTimeInput, \r\n    noOfSlicesInput, \r\n    diameterInput, \r\n    spicinessScaleInput, \r\n    slicesOfBreadInput\r\n} from '../FieldComponents';\r\nimport { required, minLength6 } from '../FieldValidation'\r\n\r\ninterface AddDishFormProps {\r\n    onNameInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onPrepTimeInputChange: (value: any) => void,\r\n    onNoOfSlicesInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onDiameterInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onSpicinessScaleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onSlicesOfBreadInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onTypeSelectChange: (e: React.ChangeEvent<HTMLSelectElement>) => void,\r\n    name: string,\r\n    prepTime: string,\r\n    noOfSlices: number,\r\n    diameter: number,\r\n    spicinessScale: number,\r\n    slicesOfBread: number,\r\n    type: string,\r\n    handleSubmit: () => void,\r\n    onSubmit: () => void,\r\n    valid: boolean,\r\n    reset: () => void\r\n}\r\n\r\nconst AddDishForm: React.FC<AddDishFormProps> = ({\r\n    onNameInputChange,\r\n    onPrepTimeInputChange,\r\n    onNoOfSlicesInputChange,\r\n    onDiameterInputChange,\r\n    onSpicinessScaleInputChange,\r\n    onSlicesOfBreadInputChange,\r\n    onTypeSelectChange,\r\n    name,\r\n    prepTime,\r\n    noOfSlices,\r\n    diameter,\r\n    spicinessScale,\r\n    slicesOfBread,\r\n    type,\r\n    handleSubmit,\r\n    valid,\r\n    reset,\r\n}) => {\r\n\r\n    //reset select after submit by changing key which force re-render\r\n    const [resetSelect, setResetSelect] = useState('')\r\n\r\n    const handleSubmitt = (e: any) => {\r\n        e.preventDefault();\r\n        handleSubmit();\r\n        setResetSelect(uuidv4())\r\n        reset();\r\n    }\r\n\r\n    //redux-form-input-mask fro prepTime field\r\n    const prepTimeMask = createTextMask({\r\n        pattern: '99:99:99',\r\n        onChange: (value: any) => {\r\n            onPrepTimeInputChange(value.match(/.{1,2}/g)?.join(\":\"))\r\n        }\r\n    })\r\n\r\n    //prevet ts error redux-form with createTextMask\r\n    const FieldCustom = Field as new () => GenericField<any>;\r\n\r\n    return (\r\n        <form className=\"add-dish-form\" onSubmit={handleSubmitt} key={resetSelect}>\r\n            <label>Dish Name\r\n                <Field name=\"name\" value={name} onChange={onNameInputChange} component={nameInput} validate={required}/>\r\n            </label>\r\n            <label>Preparation Time\r\n                <FieldCustom name=\"prepTime\" value={prepTime} component={prepTimeInput} validate={[required, minLength6]} {...prepTimeMask} />\r\n            </label>\r\n            <select onChange={onTypeSelectChange}>\r\n                <option value=\"\">--Select dish type--</option>\r\n                <option value=\"pizza\">pizza</option>\r\n                <option value=\"soup\">soup</option>\r\n                <option value=\"sandwich\">sandwich</option>\r\n            </select>\r\n            {type === \"pizza\" && \r\n            <>\r\n                <label>Number Of Slices\r\n                    <Field name=\"no of slices\" value={noOfSlices} onChange={onNoOfSlicesInputChange} component={noOfSlicesInput} validate={required}/>\r\n                </label>\r\n                <label>Diameter\r\n                    <Field name=\"diameter\" value={diameter} onChange={onDiameterInputChange} component={diameterInput} validate={required}/>\r\n                </label>\r\n            </>\r\n            }\r\n            {type === \"soup\" &&\r\n            <label>Spiciness Scale (1-10)\r\n                <Field name=\"spiciness scale\" value={spicinessScale} onChange={onSpicinessScaleInputChange} component={spicinessScaleInput} validate={required}/> \r\n            </label>\r\n            }\r\n            {type === \"sandwich\" &&\r\n            <label>Slices of Bread\r\n                <Field name=\"slices of bread\" value={slicesOfBread} onChange={onSlicesOfBreadInputChange} component={slicesOfBreadInput} validate={required}/> \r\n            </label> \r\n            }\r\n            {type && <button disabled={!valid}>Submit</button>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\nform: 'add-dish-form',\r\n})(AddDishForm as any);\r\n","export default __webpack_public_path__ + \"static/media/spinner.3f640995.svg\";","import './Modal.scss'\r\nimport spinner from '../../spinner.svg'\r\n\r\ninterface ModalProps {\r\n    responseData: {\r\n        name: string,\r\n        type: string,\r\n        preparation_time: string,\r\n        no_of_slices: number,\r\n        diameter: number,\r\n        spiciness_scale: number,\r\n        slices_of_bread: number\r\n    },\r\n    closeModal: () => void,\r\n    responseStatus: number\r\n}\r\n \r\nconst Modal: React.FC<ModalProps> = ({responseData, closeModal, responseStatus}) => {\r\n    \r\n    const {\r\n        name, \r\n        preparation_time, \r\n        type, \r\n        no_of_slices, \r\n        diameter, \r\n        spiciness_scale, \r\n        slices_of_bread\r\n    } = responseData || {}\r\n\r\n    const somethigWentWrong = \r\n    <div>\r\n        <h4>Error nr <span>--{responseStatus}--</span></h4>\r\n        <p>Try Again</p>\r\n    </div>\r\n\r\n    const dishSuccessfullyAded = \r\n        <div>\r\n            <h4>Dish name: <span>{name}</span></h4>\r\n            <p>Preparation Time: <span>{preparation_time}</span></p>\r\n            <p>Type: <span>{type}</span></p>\r\n            {type==='pizza' &&\r\n            <> \r\n            <p>Number of Slices: <span>{no_of_slices}</span></p>\r\n            <p>Diameter: <span>{diameter}</span></p>\r\n            </>\r\n            }\r\n            {type==='soup' &&\r\n            <> \r\n            <p>Spiciness scale (1-10): <span>{spiciness_scale}</span></p>\r\n            </>\r\n            }\r\n            {type==='sandwich' &&\r\n            <> \r\n            <p>Slices of Bread: <span>{slices_of_bread}</span></p>\r\n            </>\r\n            }\r\n        </div>\r\n\r\n    return ( \r\n        <div className=\"modal\">\r\n            <div className=\"modal__content\">\r\n                {!responseStatus && \r\n                <div>\r\n                    <p>Waiting for response from server..</p>\r\n                    <img className=\"modal__loading\" src={spinner} alt=\"loading animation\" />\r\n                </div>\r\n                }\r\n                {responseStatus ?\r\n                <> \r\n                <div className=\"modal__header\">\r\n                    <h3 className=\"modal__title\">{responseStatus === 200 ? 'Dish successfully added' : 'Something went wrong'}</h3>\r\n                </div>\r\n                <section className=\"modal__body\">\r\n                    <div>\r\n                        {responseStatus !== 200 \r\n                        ?somethigWentWrong\r\n                        :dishSuccessfullyAded \r\n                        }\r\n                    </div>\r\n                </section>\r\n                <div className=\"modal__footer\">\r\n                    <button onClick={() => closeModal()} className=\"modal__button\">OK</button>\r\n                </div>\r\n                </>: null}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Modal;","import { useState } from 'react';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport AddDishForm from '../AddDishForm/AddDishForm';\nimport Modal from '../Modal/Modal';\n\nimport './App.scss';\n\nconst reducers = combineReducers({form: formReducer})\nconst store = createStore(reducers);\n\nfunction App() {\n\n  const [responseData, setResponseData] = useState({} as any);\n  const [showModal, setShowModal] = useState(false);\n  const [responseStatus, setResposneStatus] = useState(NaN);\n\n  const [name, setName] = useState('');\n  const [prepTime, setPrepTime] = useState('');\n  const [noOfSlices, setNoOfSlices] = useState('');\n  const [diameter, setDiameter] = useState('');\n  const [spicinessScale, setSpicinessScale] = useState('');\n  const [slicesOfBread, setSlicesOfBread] = useState('');\n  const [type, setType] = useState('');\n\n  const dishSpecificOptions = [\n    {\n      no_of_slices : parseInt(noOfSlices),\n      diameter: parseFloat(diameter)\n    },\n    {\n      \n      spiciness_scale: parseInt(spicinessScale)\n    },\n    {\n      \n      slices_of_bread: parseInt(slicesOfBread)\n    }\n  ]\n\n  const handleAddDishSubmit = () => {\n    setShowModal(true);\n    fetch(`https://frosty-wood-6558.getsandbox.com:443/dishes`, {\n      method: 'POST',\n      body: JSON.stringify({\n        name: name,\n        preparation_time: prepTime,\n        type: type,\n        ...dishSpecificOptions[type==='pizza' ? 0 : type==='soup' ? 1 : 2]\n      }),\n      headers: {\n        'Content-type': 'application/json'\n      }\n    })\n    .then((res)=> {\n      setResposneStatus(res.status)\n      if(res.status !== 200){\n        return\n      }\n      return res.json();\n    })\n    .then((data) => {\n      setResponseData(data);\n      setType('');\n    })\n    .catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const handleNameInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  } \n  const handlePrepTimeInputChange = (value: any) => {\n    setPrepTime(value)\n  } \n  const handleNoOfSliceInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNoOfSlices(e.target.value)\n  } \n  const handleDiameterInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setDiameter(e.target.value)\n  } \n  const handleSpicinessScaleInputChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSpicinessScale(e.target.value)\n  } \n  const handleSlicesOfBreadInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSlicesOfBread(e.target.value)\n  } \n  const handleTypeSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setType(e.target.value)\n  }\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setResposneStatus(NaN);\n  }\n\n\n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <h1>Add new dish</h1>\n        <AddDishForm\n        // @ts-ignore\n          onNameInputChange={handleNameInputChange}\n          onPrepTimeInputChange={handlePrepTimeInputChange}\n          onNoOfSlicesInputChange={handleNoOfSliceInputChange}\n          onDiameterInputChange={handleDiameterInputChange}\n          onSpicinessScaleInputChange={handleSpicinessScaleInputChange}\n          onSlicesOfBreadInputChange={handleSlicesOfBreadInputChange}\n          onTypeSelectChange={handleTypeSelectChange}\n          name={name}\n          prepTime={prepTime}\n          noOfSlices={noOfSlices}\n          diameter={diameter}\n          spicinessScale={spicinessScale}\n          slicesOfBread={slicesOfBread}\n          type={type}\n          onSubmit={handleAddDishSubmit}\n        />\n        {showModal && <Modal responseData={responseData} closeModal={handleCloseModal} responseStatus={responseStatus}/>}\n      </div>\n    </Provider>\n  );\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}